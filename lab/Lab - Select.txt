// Canvas html5 
// mac 刪除git憑證  → Key 鑰匙圈
// MAMP/db/mysql57  -> 路徑
// Applications/MAMP/Library/bin/mysql -uroot -p        -> 從終端機開啟mysql
// show create table tableName;
// show variables like 'data%'   -> 找到資料庫存放地點
// 在windows cmd ： set names big5;  -> 轉碼    (show variables like 'char%')
// set global 選縣名稱 = 新值
// status -> 顯示連線資訊
// kill id號碼(從status看)  -> 剔除使用者

// 不等於： <>
// 字串要加 ' '
// LIKE '%'  → % 表示任意數量的字元(英文大小寫無分別)
// BINARY ： 區分大小寫 Ex：'C%'
// WHERE 欄位 IN(內容,內容)  → 列舉
// 遞減排序：DESC  遞增排序：ASC(預設)
// 表示NULL： WHERE 欄位 IS NULL
// DISTINCT 若有橫向紀錄完全相同，只列出一筆
// 更改名稱：舊名稱 AS 新名稱(舊名稱 新名稱) → WHERE使用舊名稱較佳
// ` ` ：裡面可以表示欄位名稱
// Concat(字串,字串)  → 將字串相連
// Convert(欄位名稱,變換的欄位型態)  → 轉換欄位型態
// LIMIT N(數字) or LIMIT n,m   → 列出排頭的資料(列出前N項的資料) (從n開始算，取m個值出來顯示)
// SELECT UPDATE DELETE 都有 LIMIT子句
// 子查詢：在查詢中，再另內嵌一個查詢，內嵌的查詢需用()框住，子查詢必須給予別名(AS)
// AVG()
// COUNT     → 有資料的共有幾筆
// COUNT(*)  → 一共多少筆(包含NULL值)

// GROUP BY   → 對某欄做一個群組
SELECT AVG(UnitPrice), CategoryID FROM `products` GROUP BY CategoryID
→ AVG算完之後用 CategoryID 做成群組

AVG(UnitPrice)  CategoryID
37.97916667     1
23.06250000     2
25.16000000     3
28.73000000     4
20.25000000     5
54.00666667     6
32.37000000     7
20.68250000     8

// HAVING 用來取代 WHERE 來搭配聚合函數，因為 WHERE 不能和聚合函數一起使用
SELECT CategoryID, AVG(UnitPrice) FROM `products` 
GROUP BY CategoryID 
HAVING AVG(UnitPrice)>30

// WITH ROLLUP    → 以最左邊欄位為一群組，做小計
SELECT OrderID, ProductID, SUM(Quantity) FROM `order details`
GROUP BY OrderID,ProductID WITH ROLLUP

OrderID    ProductID  SUM(Quantity)
10248       11        12
10248       42        10
10248       72        5
10248       NULL      27

// JOIN
→ 用 JOIN 連接另外一個資料表
→ 再以 ON 指定結合的條件(通常使用主鍵與外鍵指定ON條件)
→ 欄位名稱重複，須加註資料表名稱(OR 別名)  

# 公式： 
SELECT X.欄位, Y.欄位,... 
FROM X JOIN Y ON Y.FK = X.PX

SELECT L.A,B,C FROM table1 AS L
JOIN table2 AS R ON R.A=L.A

 table1            table2                         JOIN 後的table
 A   B  ...        C    A  ...                     A   B   C
 A1  B1 ...        C1   A1 ...       (INNE         A1  B1  C1
|A2  B2 ...        C2   A2 |...      JOIN)         A2  B2  C2
 A3  B3 ...       |C3   A2 |...                    A2  B2  C3


INNER JOIN： 兩個資料表共同擁有的顯示(交集) → 預設
# OUTER JOIN
LEFT (OUTER) JOIN： 以左邊表為主要顯示
RIGHT (OUTER) JOIN： 以右邊表為主要顯示

# UNION 將兩個表完全結合
(SELECT ... FROM ...)
UNION
(SELECT ... FROM ...)

# T1： 10筆資料
  T2： 100筆資料      兩者 JOIN
T1 JOIN T2  →  每10筆資料去比對100筆資料    → 載入執行時間較快
T2 JOIN T1  →  每100筆資料去比對10筆資料

# 結論：左邊的資料通常較短，執行速率較快

// 新增單筆資料
INSERT INTO 資料表 
( 欄位 )      -> 可省略
VALUES 
(欄位對應到的值)

// 刪除資料
＃ (DELETE FROM)但如果沒有寫 WHERE，等於刪除整份資料表內容 → 但會記得曾經的內建編號
TRUNCATE TABLE    →  將所有資料表內容清空，不會進行LOG紀錄

// 更新資料
UPDATE 資料表
SET 欄位名稱 ＝ (新內容), 欄位名稱 ＝ (新內容)
WHERE 指定的目標

// 建立資料庫 (在終端機：mysql -u root -p root) (desc 資料表 －> 查看資料表)
CREATE DATABASE 資料庫名稱(Ex: db08) default character set utf8;
USE 資料庫;
CREATE TABLE IF NOT EXISTS (資料庫名稱.)資料表名稱
(
  id int auto_increment not null primary key,    -> 自動編號(primary key)
  欄位名稱 欄位型態 欄位特性(可否null -> NULL/NOT NULL)
)

# 生成primary key
id int auto_increment not null primary key   // 在第一行寫
id int not null primary key         // 在第一行寫
primary key (id)          // 在最後一行附註

CREATE TABLE t1(
  id int not null,        // id int not null primary key
  data int null,
  primary key (id)
);

// 修改資料表結構
- 加入新的欄位
ALTER TABLE 資料表名稱(t1)
ADD 欄位名稱(email) varchar(30) DEFAULT 'someone@somewhere.com'
-> DEFAULT 預設值

- 修改欄位定義
ALTER TABLE t1
MODIFY email varchar(40) DEFAULT 'who@where.com'
-> 如果修改了，預設值會變回null

DESCRIBE 資料表(t1)   －> 可以看到內部設定

- 刪除欄位
ALTER TABLE t1
DROP COLUMN email;

// 刪除資料表/資料庫
DROP (資料表/資料庫)

set sql_mode = 'traditional';   -> 會幫你驗證在列中新增不正確的值時，給予出錯的提示，並停止insert/update
set sql_mode = '' -> DEFAULT

// 條件約束(8.0以上才支援)        -> 條件式對多的那方設置
// select version()   -> 查看版本
ALTER TABLE 資料表名稱
ADD CONSTRAINT 條件名稱 CHECK (條件);
// 如果主鍵是自動編號，當條件約束啟動並發動，依然會使用到id

Ex: 
ALTER TABLE t2
ADD CONSTRAINT chk_data CHECK (data >= 0);
Ex: INSERT INTO(data) VALUES (-100)
-> id 會被使用

// 建立關聯
ALTER TABLE 資料表名稱(多的那方)
ADD CONSTRAINT 規則名稱
FOREIGN KEY (外鍵欄位名稱) REFERENCES 資料表 (外鍵欄位名稱)
Ex: 
ALTER TABLE orders
ADD CONSTRAINT fk_customer_orders
FOREIGN KEY (customerId) REFERENCES customer (customerId);
# on update cascade         -> 修改刪除會進行外鍵連動(其他資料表會受到異動)
# on delete cascade;

// 設立唯一值 unique
I:  ALTER TABLE 資料表 CONSTRAINT 規則名稱 unique(欄位名稱,...);
    ALTER TABLE customer CONSTRAINT uc unique(CompanyName);
刪除： ALTER TABLE 資料表 DROP CONSTRAINT 規則名稱;
      ALTER TABLE customer DROP CONSTRAINT uc;  -> 如果刪不掉就改下面方式刪掉
II: CREATE unique INDEX 索引名稱 on 資料表(欄位名稱);
    CREATE unique INDEX idx_company customer(CompanyName);
刪除： DROP INDEX 索引名稱 on 資料表;
      DROP INDEX idx_company on customer;

// 新增索引
CREATE INDEX 索引編號 on 資料表名稱(主排序欄位,副排序欄位,...)
Ex: CREATE INDEX idx_tel on students(tel,name)
-> 缺點：浪費硬碟空間，傳輸時間 (資源換速度)


# engine
engine = MyISAM;        // 無法復原 transaction 之前的檔案(不能rollback回到 start transaction之前)
engine = InnoDB;        // 做任何事情都會留下紀錄(log檔)
engine = Memory         // 將資料庫放在記憶體，適用在非永久性的資料
engine = Federated      // 類似影子資料表，可透過影子資料表間接存取本尊資料表 -> connection = 'mysql://.../本尊資料表'
// transaction
start transaction    // 開始異動
rollback transaction    // 否決異動
commit transaction      // 確認異動

// Merge      -> 連結兩個資料表
create table Lab          // Merge union 不佔據記憶體 
(
  id int auto_increment unique,
  data varchar(5) not null
) engine = Merge union = (t1, t2) insert_method = first;      // insert_method = first;  Lab 在寫入新資料的時候會放入第一張資料表(t1)
-- insert_method 選項： no | first | last
insert into Lab (data) values ('rec3');


# 使用者新增與權限：
create user jeter identified by 'Pa$$w0rd';         // 建立使用者
set password for carl = password('Pa$$w0rd');       // 重設密碼
grant select on northwind.* to carl;                // 新增權限(SELECT的權限)
revoke update on northwind.customers from carl;     // 收回權限(UPDATE的權限)


// 備份
在mysql外
(mamp的資料夾)\mysqldump -u root  --database 資料庫名稱 > c:\temp\test_bak.txt(備份路徑)


// 型態
decimal(總長度,小數點後幾位)         // 小數點溢位就四捨五入
datetime                          // YYYY-MM-DD 00:00:00    -> 如果資料錯誤在traditional下會被擋下
timestamp                         // 沒有寫會直接自動加入新增(更新)的時間
enum 定義允許值(只接受固定值)         // 1就是'Y', 2就是'N'
data int(5) zerofill not null      // 前面不足的位數自動補 0
data set('reading', 'music', 'sport') not null          // 三種選項任意排列組合


# transaction
// 不管哪種隔離等級，在update或delete都需下write lock
set session transaction isolation level read committed; 
// read committed 可以讀取任何"認可"(commit)的資料 可以再寫入的情況下讓其他人讀取資料，防止系統卡住
set session transaction isolation level repeatable read;
// repeatable read 重複讀取與最初相同的結果(即使有其他新值(已commit)，依然會讀取原本資料(commit前)) -> 在執行隔離期間不受到其他client端影響

lock tables 資料表名稱 read(write);                   // 鎖定資料表變為唯讀直到unlock(write: 無法讀取直到unlock)
unlock tables;
write的優先權 > read
lock in share mode
/* start transaction              // 在 select 結尾for update -> 讀取的資料為已認可的(如果有人正在start transaction，就會進行等待)
select .....for update */




# 美商供應的產品清單
SELECT ProductID,ProductName,UnitPrice,SupplierID FROM products 
WHERE SupplierID IN(SELECT SupplierID FROM suppliers
      WHERE Country ='USA' )
ORDER BY SupplierID

SELECT s.SupplierID, ProductID, ProductName, Country FROM products AS p
JOIN suppliers AS s ON s.SupplierID=p.SupplierID
WHERE Country='USA'
ORDER BY SupplierID

# 有價差的價目表
SELECT ProductID,ProductName, UnitPrice,
UnitPrice-(SELECT AVG(UnitPrice) FROM products) AS DiffPrice 
FROM products

# 根據各個類別，列出與自己類別比較的價差
SELECT CategoryID, p.CategoryID, ProductID, ProductName, UnitPrice,
UnitPrice-(SELECT AVG(UnitPrice) FROM products WHERE CategoryID = p.CategoryID) AS DiffPrice
FROM products AS p

＃ 4個資料表 JOIN
SELECT DISTINCT o.CustomerID, CompanyName, od.ProductID, ProductName FROM customers AS s
JOIN orders AS o ON o.CustomerID=s.CustomerID
JOIN `order details` AS od ON od.OrderID=o.OrderID
JOIN products AS p ON p.ProductID=od.ProductID
ORDER BY CustomerID,ProductID

＃ 最後10筆訂單，按照時間遞減(DESC)
SELECT * FROM
(
  SELECT * FROM orders
  ORDER BY OrderDate DESC LIMIT 10
) AS T
ORDER BY OrderDate


/* 010 
  確定打開的是 Northwind 資料庫 */
use Northwind;

/* 110 
  請寫一道 Query 列出:
  products table 中的所有產品資料
 */ 

select * from products


/* 120 
  請寫一道 Query 列出:
  products table 所有產品, 條列資料時, 
  請列出以下欄位
  ProductID, ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel
 */ 

select ProductID, ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel
  from products


/* 130 
  請寫一道 Query 列出:
  products table 庫存量低於再訂購量(安全庫存量)的產品資料, 條列資料時, 
  請列出以下欄位
  ProductID, ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel
 */ 


select ProductID, ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel
  from products
  where UnitsInStock < ReorderLevel


/* 140 
  請寫一道 Query 列出:
  products table (庫存量 + 訂購中數量)低於再訂購量的產品資料, 條列資料時, 
  請列出以下欄位
  ProductID, ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel
 */ 

select ProductID, ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel
  from products
  where (UnitsInStock + UnitsOnOrder) < ReorderLevel


/* 150 
  請寫一道 Query 列出:
  products table 庫存量低於再訂購量的產品資料, 條列資料時, 
  請列出以下欄位
  SupplierID, ProductID, ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel
  並且, 相同供應商代號(SupplierID)的產品請排在一起
 */ 

select SupplierID, ProductID, ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel
  from products
  where UnitsInStock < ReorderLevel
  order by SupplierID


/* 160 
  請寫一道 Query 列出:
  products table 產品名稱以 c 開頭的資料
 */ 

select *
  from products
  where ProductName Like 'c%'


/* 170 
  請寫一道 Query 列出:
  products table 類別編號(CategoryID)為 1, 4, 8 的產品資料
  排序時, 請按"類別編號"排序, 相同類別編號的產品按產品名稱(ProductName)排列
 */ 

select *
  from products
  where CategoryID in (1, 4, 8)
  order by CategoryID, ProductName


/* 180 
  請寫一道 Query 列出:
  products table 單價介於 10 到 20 元之間(包含 10, 20)的產品資料
  並且按照單價(UnitPrice)由大到小排序
 */ 

select *
  from products
  where UnitPrice between 10 and 20
  order by UnitPrice desc

/* 190
  請寫一道 Query 列出: 傳真電話(fax)是「空白」的供應商(suppliers)公司名稱
*/

SELECT companyname, fax
  FROM suppliers
  WHERE fax IS NULL;


/* 210 
  請寫一道 Query 列出:
  products table 所有產品, 條列資料時, 
  請列出以下欄位
  ProductID, ProductName, UnitPrice, 不過, 各欄位名稱請用中文顯示
  產品編號, 產品名稱, 單價
 */ 

select ProductID as `產品編號`, ProductName as `產品名稱`, UnitPrice as `單價`, 
  (UnitPrice * UnitsInStock) as StockCost
  from products


/* 220 
  請查 suppliers 資料表, 供應商來自哪些國家? (相同的國名, 只列一筆即可)
 */ 

SELECT DISTINCT country
 FROM suppliers
 ORDER BY country;


/* 220 
  請列出 UnitPrice 最貴的前三項產品 (products)
 */ 

select productID, ProductName, UnitPrice 
  from products
  order by UnitPrice DESC
  limit 3;

/* 230 
  為什麼下列的指令傳回空集合?
 */ 

select *
  from products
  where ProductName Like binary 'c%'

/* 310
  按照員工資料表(employees)的內容, 請查出一共有幾位員工?
 */
SELECT COUNT(*) FROM employees


/* 320
  按照員工資料表(employees)的內容, ReportsTo有資料的記錄一共幾筆?
 */
SELECT COUNT(reportsto) FROM employees

/* 330
  下列的指令, 請問錯了嗎?
 */

select categoryID, productID, AVG(UnitPrice)
  from products
  group by categoryID
# 只有列在右邊的欄位才能?

/* 340
  categoryID 是產品類別的代號, 請統計各類產品(products)的庫存成本?
  庫存成本請直接以: 庫存量 * 牌價 (UnitsInStock * UnitPrice) 計算即可.
 */

select categoryID, Sum(UnitsInStock * UnitPrice)
  from products
  group by categoryID;

/* 350
  同上, 但庫存成本超過 12000 才要列出.
 */

select categoryID, Sum(UnitsInStock * UnitPrice)
  from products
  group by categoryID
  having Sum(UnitsInStock * UnitPrice) > 12000

/* 360
  請從 order details 統計各項產品銷售總和, 並且一併列出
  該產品的銷售明細.
 */

SELECT productid, orderid, SUM(quantity) AS total_quantity
FROM `order details`
GROUP BY orderid, productid
WITH ROLLUP

/* 410
  請寫一道 Query 列出 products 資料表的以下欄位
  ProductID, ProductName, SupplierID
 */ 

select ProductID, ProductName, SupplierID from products


/* 420
   同上, 但請一併列出該供應商名稱(CompanyName)、
   聯絡電話(Phone)、聯絡人(ContactName)好嗎?
   另外, 相同供應商的資料請列在一起
 */ 
select ProductID, ProductName as PN, p.SupplierID, CompanyName, Phone, ContactName 
  from products p join suppliers s
  on p.SupplierID = s.SupplierID
  order by p.SupplierID


/* 430
   我想列出「所有」供應商目前各自提供我們哪些產品資料的對照表,
   目前沒提供我們產品的供應商也要列出

   <note>
   下指令前, 請先執行下列指令:
   -- begin --
   insert into suppliers
     (supplierID, CompanyName, ContactName, Phone)
      values
     (30, 'Taiwan First', 'A-Ban', '(001) 000-0001')
   -- end --
 */ 

select s.SupplierID, CompanyName, ProductID, ProductName 
  from suppliers s left join products p
  on s.SupplierID = p.SupplierID
  order by s.SupplierID



/* 510
  請列出「有買 23 號產品, 而且買超過 20 個」的訂單。
 */ 
select orderid, customerid from orders 
  where orderid in 
  (select orderid from `order details` 
    where productid = 23 and quantity > 20)


SELECT o.OrderID,ProductID,Quantity,CustomerID
FROM orders o
JOIN `order details` od ON od.OrderID=o.OrderID
WHERE productID = 23 AND Quantity >20
ORDER BY OrderID,ProductID


/* 520
  請列出目前資料庫最後一天有經手訂單處理的員工清單。
*/
select EmployeeID, FirstName, LastName from Employees
  where EmployeeID in 
  (
    select EmployeeID from Orders
      where OrderDate = (select Max(OrderDate) from Orders)
  )


/* 530
  請列出各項產品的類別、編號、品名、單價、該類產品平均單價、
  單價與產品平均單價的「價差」。
 */ 
select CategoryID, ProductID, UnitPrice, 
  (select Avg(UnitPrice) from products as i 
    where CategoryID = o.CategoryID) as AvgPrice,
  UnitPrice - (select Avg(UnitPrice) from products as I 
    where CategoryID = o.CategoryID) as DiffPrice
  from products as o
  order by CategoryID, ProductID

